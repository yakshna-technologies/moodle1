# PLEASE NOTE: Travis is not currently utilised by the Moodle core integration
# process (which uses our internal CI system) this file is here for the benefit
# of community developers git clones - see MDL-51458.

sudo: false

# We currently disable Travis notifications entirely until https://github.com/travis-ci/travis-ci/issues/4976
# is fixed.
notifications:
  email: false

language: php

php:
    # We only run the highest and lowest supported versions to reduce the load on travis-ci.org.
    - 7.4


env:
    # Although we want to run these jobs and see failures as quickly as possible, we also want to get the slowest job to
    # start first so that the total run time is not too high.
    #
    # We only run MySQL on PHP 5.6, so run that first.
    # CI Tests should be second-highest in priority as these only take <= 60 seconds to run under normal circumstances.
    # Postgres is significantly is pretty reasonable in its run-time.

    # Run unit tests on MySQL
    - DB=mysqli   TASK=PHPUNIT

    


cache:
    directories:
      - $HOME/.composer/cache
      - $HOME/.npm
      
#deploy:
    #provider: pages
    #skip-cleanup: true
    #on:
     # branch: moodle_branch_trav
deploy:
  provider: s3
  access_key_id: "AKIAU5H2IFPLOX7SMKHZ"
  secret_access_key: "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"
  bucket: "moodletest123"
  skip_cleanup: true

        
before_script:
    - phpenv config-rm xdebug.ini
    - >
      if [ "$TASK" = 'PHPUNIT' -o "$TASK" = 'UPGRADE' ];
      then
        # Copy generic configuration in place.
        cp config-dist.php config.php ;
        # Create the moodledata directory.
        mkdir -p "$HOME"/roots/base
        # The database name and password.
        sed -i \
          -e "s%= 'moodle'%= 'travis_ci_test'%" \
          -e "s%= 'password'%= ''%" \
          config.php ;
        # The wwwroot and dataroot.
        sed -i \
          -e "s%http://example.com/moodle%http://localhost%" \
          -e "s%/home/example/moodledata%/home/travis/roots/base%" \
          config.php ;
        if [ "$DB" = 'pgsql' ];
        then
          # Postgres-specific setup.
          sed -i \
            -e "s%= 'username'%= 'postgres'%" \
            config.php ;
          psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;
        fi
        if [ "$DB" = 'mysqli' ];
        then
          # MySQL-specific setup.
          sed -i \
            -e "s%= 'pgsql'%= 'mysqli'%" \
            -e "s%= 'username'%= 'travis'%" \
            -e "s%=> 'utf8mb4_unicode_ci'%=> 'utf8mb4_bin'%" \
            config.php;
          mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;
          mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;
          mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;
          mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;
        fi
      fi
    - >
      if [ "$TASK" = 'PHPUNIT' ];
      then
        # Create a directory for the phpunit dataroot.
        mkdir -p "$HOME"/roots/phpunit
        # The phpunit dataroot and prefix..
        sed -i \
          -e "/require_once/i \\\$CFG->phpunit_dataroot = '\/home\/travis\/roots\/phpunit';" \
          -e "/require_once/i \\\$CFG->phpunit_prefix = 'p_';" \
          config.php ;
        # Initialise PHPUnit for Moodle.
        php admin/tool/phpunit/cli/init.php
      fi
    - >
      if [ "$TASK" = 'GRUNT' ];
      then
        npm install --no-spin;
        npm install --no-spin -g grunt ;
      fi
    ########################################################################
    # CI Tests
    ########################################################################
    - >
      if [ "$TASK" = 'CITEST' ];
      then
        # Note - this is deliberately placed in the script section as we
        # should not add any code until after phpunit has run.
        # The following repositories are required.
        # The local_ci repository does the actual checking.
        git clone https://github.com/moodlehq/moodle-local_ci.git local/ci
        # We need the official upstream for comparison
        git remote add upstream https://github.com/moodle/moodle.git;
        git fetch upstream MOODLE_31_STABLE;
        export GIT_PREVIOUS_COMMIT="`git merge-base FETCH_HEAD $TRAVIS_COMMIT`";
        export GIT_COMMIT="$TRAVIS_COMMIT";
        export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`
        # Variables required by our linter.
        export gitcmd=`which git`;
        export gitdir="$TRAVIS_BUILD_DIR";
        export phpcmd=`which php`;
      fi
    ########################################################################
    # Upgrade test
    ########################################################################
    - >
      if [ "$TASK" = 'UPGRADE' ];
      then
        # We need the official upstream.
        git remote add upstream https://github.com/moodle/moodle.git;
        # Checkout 27 STABLE branch.
        git fetch upstream MOODLE_27_STABLE;
        git checkout MOODLE_27_STABLE;
        # Perform the upgrade
        php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname="Upgrade test" --shortname=Upgrade;
        # Return to the previous commit
        git checkout -;
        # Perform the upgrade
        php admin/cli/upgrade.php --non-interactive --allow-unstable ;
        # The local_ci repository can be used to check upgrade savepoints.
        #git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;
        git clone https://github.com/yakshna-technologies/moodle1.git
      fi
